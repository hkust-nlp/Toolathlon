[
  {
    "email_id": "1",
    "subject": "Course Schedule Notification",
    "from_addr": "coxw@mcp.com",
    "to_addr": "mcpcanvasadmin3@mcp.com",
    "cc_addr": null,
    "bcc_addr": null,
    "date": "1 days before current date",
    "message_id": "<202409170001@mcp.com>",
    "body_text": "Dear Academic Administrators,\nI hope this email finds you well. I am writing to inform you that the new academic course schedule for the coming academic year has been finalized and is now ready for your review and implementation.\nXXX University",
    "body_html": "<html><body><p>Dear Academic Administrators,</p><p>I hope this email finds you well. I am writing to inform you that the new academic course schedule for the coming academic year has been finalized and is now ready for your review and implementation.</p><p>XXX University</p></body></html>",
    "is_read": true,
    "is_important": false,
    "folder": "INBOX",
    "attachments": [
      {
        "filename": "course_schedule.md",
        "content_type": "text/markdown",
        "size": 9756,
        "content": ""
      }
    ]
  }
]