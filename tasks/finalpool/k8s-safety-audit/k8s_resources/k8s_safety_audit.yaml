apiVersion: v1
kind: Namespace
metadata:
  name: production
---
apiVersion: v1
kind: Namespace
metadata:
  name: staging
---
apiVersion: v1
kind: Namespace
metadata:
  name: dev
---
apiVersion: v1
kind: Namespace
metadata:
  name: test
---
# =========================
# HIGH RISK #1 (Score=10, High)
# Matched: Privileged(10) → Direct HIGH risk, ignore other items
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-agent
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels: { app: monitoring-agent, env: production }
  template:
    metadata:
      labels: { app: monitoring-agent, env: production }
    spec:
      containers:
      - name: monitor
        image: prom/prometheus:v2.52.0
        securityContext:
          privileged: true
        ports:
        - containerPort: 9090
---
# =========================
# HIGH RISK #2 (Score=10, High)
# Matched: /var/run/docker.sock( +5 ) + CAP_SYS_ADMIN( +4 ) + writable root file system( +1 ) = 10 → HIGH
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: build-runner
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: build-runner, env: dev }
  template:
    metadata:
      labels: { app: build-runner, env: dev }
    spec:
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
          type: FileOrCreate   # For compatibility with kind/containerd, avoid validation error if the socket does not exist
      containers:
      - name: runner
        image: alpine:3.20
        imagePullPolicy: IfNotPresent
        command: ["sh","-c","sleep infinity"]  # Override default command to keep container running
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            add: ["SYS_ADMIN"]  # Required for matching risk rule
---
# =========================
# MEDIUM RISK #1 (Score=7, Medium)
# Matched: hostPID(+2) + allowPrivilegeEscalation(+2) + running as root(+2) + writable root file system(+1) = 7
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diag-tools
  namespace: staging
spec:
  replicas: 1
  selector:
    matchLabels: { app: diag-tools, env: staging }
  template:
    metadata:
      labels: { app: diag-tools, env: staging }
    spec:
      hostPID: true
      containers:
      - name: diag
        image: alpine:3.20
        command: ["sh","-c","sleep 3600"]
        securityContext:
          runAsUser: 0            # Run as root
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: false
---
# =========================
# MEDIUM RISK #2 (Score=7, Medium)
# Matched: hostNetwork(+2) + CAP_NET_ADMIN(+4) + writable root file system(+1, unspecified, defaults to false) = 7
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: net-tapper
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels: { app: net-tapper, env: test }
  template:
    metadata:
      labels: { app: net-tapper, env: test }
    spec:
      hostNetwork: true
      containers:
      - name: tapper
        image: busybox:1.36
        command: ["sh","-c","sleep 3600"]
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            add: ["NET_ADMIN"]
---
# =========================
# MEDIUM RISK #3 (Score=7, Medium)
# Matched: CAP_SYS_TIME(+4) + hostIPC(+2) + writable root file system(+1) = 7
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: time-sync
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels: { app: time-sync, env: production }
  template:
    metadata:
      labels: { app: time-sync, env: production }
    spec:
      hostIPC: true
      containers:
      - name: timesvc
        image: alpine:3.20
        command: ["sh","-c","sleep 3600"]
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            add: ["SYS_TIME"]
---
# =========================
# LOW RISK #1 (Score=0, Low)
# Hardened: Non-privileged, no host*, read-only root, non-root, all capabilities dropped
# =========================
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-gateway-www
  namespace: production
data:
  index.html: |
    <h1>payment-gateway</h1>
    <p>ok</p>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-gateway
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels: { app: payment-gateway, env: production }
  template:
    metadata:
      labels: { app: payment-gateway, env: production }
    spec:
      containers:
      - name: app
        image: python:3.12-alpine
        env:
        - name: PYTHONDONTWRITEBYTECODE
          value: "1"
        command: ["python","-m","http.server","8080","--directory","/srv/www"]
        ports: [{ containerPort: 8080 }]
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities: { drop: ["ALL"] }
        volumeMounts:
        - name: www
          mountPath: /srv/www
          readOnly: true
      volumes:
      - name: www
        configMap:
          name: payment-gateway-www
---
# =========================
# LOW RISK #2 (Score=0, Low)
# Same as above hardened profile baseline
# =========================
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-service-www
  namespace: staging
data:
  index.html: |
    <h1>auth-service</h1>
    <p>ok</p>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: staging
spec:
  replicas: 1
  selector:
    matchLabels: { app: auth-service, env: staging }
  template:
    metadata:
      labels: { app: auth-service, env: staging }
    spec:
      containers:
      - name: app
        image: python:3.12-alpine
        env:
        - name: PYTHONDONTWRITEBYTECODE
          value: "1"
        command: ["python","-m","http.server","8080","--directory","/srv/www"]
        ports: [{ containerPort: 8080 }]
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities: { drop: ["ALL"] }
        volumeMounts:
        - name: www
          mountPath: /srv/www
          readOnly: true
      volumes:
      - name: www
        configMap:
          name: auth-service-www
---
# =========================
# LOW RISK #3 (Score=1, Low)
# Matched: writable root file system(+1); otherwise safe
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-api
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: inventory-api, env: dev }
  template:
    metadata:
      labels: { app: inventory-api, env: dev }
    spec:
      containers:
      - name: inventory
        image: nginxinc/nginx-unprivileged:1.25-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false   # Only this item scores
          runAsNonRoot: true
          runAsUser: 101                  # Built-in user in this image
          capabilities:
            drop: ["ALL"]
---
# =========================
# LOW RISK #4 (Score=0, Low)
# Redis demo, configured to low-privilege baseline
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache-service
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels: { app: cache-service, env: test }
  template:
    metadata:
      labels: { app: cache-service, env: test }
    spec:
      containers:
      - name: redis
        image: redis:7.2
        ports:
        - containerPort: 6379
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop: ["ALL"]
---
# =========================
# LOW RISK #5 (Score=0, Low)
# Elasticsearch demo, configured to low-privilege baseline (runs as non-root)
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-engine
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels: { app: search-engine, env: test }
  template:
    metadata:
      labels: { app: search-engine, env: test }
    spec:
      containers:
      - name: es
        image: busybox:1.36
        command: ["sh","-c","sleep infinity"]
        ports:
        - containerPort: 9200
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop: ["ALL"]
