apiVersion: v1
kind: Namespace
metadata:
  name: production
---
apiVersion: v1
kind: Namespace
metadata:
  name: staging
---
apiVersion: v1
kind: Namespace
metadata:
  name: dev
---
apiVersion: v1
kind: Namespace
metadata:
  name: test
---
# =========================
# 高风险 #1（分=10，高）
# 命中：Privileged(10) → 直接高风险，忽略其他项
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-agent
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels: { app: monitoring-agent, env: production }
  template:
    metadata:
      labels: { app: monitoring-agent, env: production }
    spec:
      containers:
      - name: monitor
        image: prom/prometheus:v2.52.0
        securityContext:
          privileged: true
        ports:
        - containerPort: 9090
---
# =========================
# 高风险 #2（分=9，高）
# 命中：/var/run/docker.sock( +5 ) + CAP_SYS_ADMIN( +4 ) = 9 → 高
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: build-runner
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: build-runner, env: dev }
  template:
    metadata:
      labels: { app: build-runner, env: dev }
    spec:
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      containers:
      - name: runner
        image: docker:25.0.5-dind-rootless
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            add: ["SYS_ADMIN"]  # 对应 CAP_SYS_ADMIN
---
# =========================
# 中风险 #1（分=6，中）
# 命中：hostPID(+2) + allowPrivilegeEscalation(+2) + 以 root 运行(+2) = 6
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diag-tools
  namespace: staging
spec:
  replicas: 1
  selector:
    matchLabels: { app: diag-tools, env: staging }
  template:
    metadata:
      labels: { app: diag-tools, env: staging }
    spec:
      hostPID: true
      containers:
      - name: diag
        image: alpine:3.20
        command: ["sh","-c","sleep 3600"]
        securityContext:
          runAsUser: 0            # 以 root 运行
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: false
---
# =========================
# 中风险 #2（分=6，中）
# 命中：hostNetwork(+2) + CAP_NET_ADMIN(+4) = 6
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: net-tapper
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels: { app: net-tapper, env: test }
  template:
    metadata:
      labels: { app: net-tapper, env: test }
    spec:
      hostNetwork: true
      containers:
      - name: tapper
        image: busybox:1.36
        command: ["sh","-c","sleep 3600"]
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            add: ["NET_ADMIN"]
---
# =========================
# 中风险 #3（分=7，中）
# 命中：CAP_SYS_TIME(+4) + hostIPC(+2) + 可写根文件系统(+1) = 7
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: time-sync
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels: { app: time-sync, env: production }
  template:
    metadata:
      labels: { app: time-sync, env: production }
    spec:
      hostIPC: true
      containers:
      - name: timesvc
        image: alpine:3.20
        command: ["sh","-c","sleep 3600"]
        securityContext:
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            add: ["SYS_TIME"]
---
# =========================
# 低风险 #1（分=0，低）
# 强化：非特权、非 host*、只读根、非 root、丢弃全部能力
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-gateway
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels: { app: payment-gateway, env: production }
  template:
    metadata:
      labels: { app: payment-gateway, env: production }
    spec:
      containers:
      - name: api
        image: nginx:1.25
        ports:
        - containerPort: 8080
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop: ["ALL"]
---
# =========================
# 低风险 #2（分=0，低）
# 同上强化基线
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: staging
spec:
  replicas: 1
  selector:
    matchLabels: { app: auth-service, env: staging }
  template:
    metadata:
      labels: { app: auth-service, env: staging }
    spec:
      containers:
      - name: auth
        image: nginx:1.25
        ports:
        - containerPort: 5050
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop: ["ALL"]
---
# =========================
# 低风险 #3（分=1，低）
# 命中：可写根文件系统(+1)；其余均安全
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-api
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: inventory-api, env: dev }
  template:
    metadata:
      labels: { app: inventory-api, env: dev }
    spec:
      containers:
      - name: inventory
        image: nginx:1.25
        ports:
        - containerPort: 6060
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false   # 仅此一项加分
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop: ["ALL"]
---
# =========================
# 低风险 #4（分=0，低）
# Redis demo，按低权基线配置
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache-service
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels: { app: cache-service, env: test }
  template:
    metadata:
      labels: { app: cache-service, env: test }
    spec:
      containers:
      - name: redis
        image: redis:7.2
        ports:
        - containerPort: 6379
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop: ["ALL"]
---
# =========================
# 低风险 #5（分=0，低）
# Elasticsearch demo，按低权基线配置（非 root 运行）
# =========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-engine
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels: { app: search-engine, env: test }
  template:
    metadata:
      labels: { app: search-engine, env: test }
    spec:
      containers:
      - name: es
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
        env:
        - name: discovery.type
          value: single-node
        ports:
        - containerPort: 9200
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop: ["ALL"]
